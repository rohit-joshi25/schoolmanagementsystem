<?php

namespace App\Http\Controllers\SuperAdmin;

use App\Http\Controllers\Controller;
use App\Models\School;
use App\Models\Plan;
use App\Models\SchoolSubscription;
use App\Models\Invoice;
use Illuminate\Http\Request;
use App\Models\PaymentLog;
class SchoolSubscriptionController extends Controller
{
    /**
     * Show the form for assigning a plan to a NEW school.
     */
    public function create()
    {
        $activeMenus = [2];
        $schools = School::where('status', 'active')
                         ->doesntHave('currentSubscription')
                         ->get();
        $plans = Plan::where('status', 'active')->get();

        return view('superadmin.subscriptions.create', compact('schools', 'plans', 'activeMenus'));
    }

    /**
     * Store a new subscription.
     */
    public function store(Request $request)
    {
        $validatedData = $request->validate([
            'school_id' => 'required|exists:schools,id',
            'plan_id' => 'required|exists:plans,id',
            'start_date' => 'required|date',
        ]);

        // ** THE FIX IS HERE: Call the reusable function **
        $this->assignPlanToSchool($validatedData);

        return redirect()->route('superadmin.schools.index')
                         ->with('success', 'Plan assigned to the school successfully.');
    }

    /**
     * Show the form for changing a school's existing plan.
     */
    public function change()
    {
        $activeMenus = [2];
        $schools = School::with('currentSubscription.plan')
                         ->where('status', 'active')
                         ->whereHas('currentSubscription')
                         ->get();
        $plans = Plan::where('status', 'active')->get();

        return view('superadmin.subscriptions.change', compact('schools', 'plans', 'activeMenus'));
    }

    /**
     * Update an existing subscription (Upgrade/Downgrade).
     */
    public function update(Request $request)
    {
         $validatedData = $request->validate([
            'school_id' => 'required|exists:schools,id',
            'plan_id' => 'required|exists:plans,id',
            'start_date' => 'required|date',
        ]);

        $this->assignPlanToSchool($validatedData);

        return redirect()->route('superadmin.schools.index')
                         ->with('success', 'School plan has been changed successfully.');
    }

    /**
     * Reusable private function to handle plan assignment logic.
     */
    private function assignPlanToSchool(array $validatedData): void
    {
        $plan = Plan::findOrFail($validatedData['plan_id']);
        $startDate = new \DateTime($validatedData['start_date']);
        $endDate = clone $startDate;

        if ($plan->duration === 'Yearly') {
            $endDate->modify('+1 year');
        } elseif ($plan->duration === 'Monthly') {
            $endDate->modify('+1 month');
        }

        SchoolSubscription::where('school_id', $validatedData['school_id'])
                            ->where('status', 'active')
                            ->update(['status' => 'cancelled']);

        $subscription = SchoolSubscription::create([
            'school_id' => $validatedData['school_id'],
            'plan_id' => $validatedData['plan_id'],
            'start_date' => $startDate->format('Y-m-d'),
            'end_date' => $endDate->format('Y-m-d'),
            'status' => 'active',
        ]);

        $invoice = Invoice::create([
            'school_id' => $subscription->school_id,
            'plan_id' => $subscription->plan_id,
            'school_subscription_id' => $subscription->id,
            'amount' => $plan->price,
            'due_date' => $subscription->start_date,
            'status' => 'pending',
        ]);

        // ** ADD THIS NEW CODE TO CREATE A PAYMENT LOG **
        PaymentLog::create([
            'invoice_id' => $invoice->id,
            'amount' => $invoice->amount,
            'payment_gateway' => 'Manual',
            'status' => 'pending',
            'notes' => 'Invoice generated by Superadmin.',
        ]);
    }
     public function history()
    {
        $activeMenus = [2];
        $subscriptions = SchoolSubscription::with('school', 'plan')
                                            ->latest()
                                            ->get();

        return view('superadmin.subscriptions.history', compact('subscriptions', 'activeMenus'));
    }
}
